{"version":3,"sources":["input/input.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS,c,sBAAA,Q;AAAU,mB,sBAAA,a;;AACV,iB,mBAAA,W;;AACA,Y,+BAAA,M;;AACA,e,qBAAA,S;;AACA,kC,qBAAA,4B;;AACA,0B,uBAAA,oB;;;yBAII,O,WAFZ,cAAc,UAAd,C,UACA,OAAO,OAAP,EAAgB,SAAhB,EAA2B,oBAA3B,C,UAIE,U,UACA,U,UACA,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C,UAGA,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C,UAGA,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C,UAGA,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C,UAGA,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C,WAGA,U,WACA,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C;AAMD,yBAAY,OAAZ,EAAqB,SAArB,EAAgC,aAAhC,EAA+C;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAF/C,cAE+C,GAF9B,KAE8B;;AAC7C,eAAK,OAAL,GAAe,OAAf;AACA,eAAK,SAAL,GAAiB,SAAjB;AACA,eAAK,SAAL,iBAA6B,QAAQ,EAAR,EAA7B;AACA,eAAK,aAAL,GAAqB,aAArB;AACD;;0BAED,I,mBAAO;AACL,eAAK,UAAL,GAAkB,6BAA6B,KAAK,UAAlC,CAAlB;AACD,S;;0BAED,Q,uBAAW;AACT,cAAI,6BAA6B,KAAK,UAAlC,CAAJ,EAAmD;AACjD,iBAAK,KAAL,CAAW,SAAX,CAAqB,GAArB,CAAyB,UAAzB;AACD;AACD,cAAI,KAAK,eAAT,EAA2B;AACzB,iBAAK,KAAL,CAAW,YAAX,CAAwB,YAAxB,EAAsC,KAAK,eAA3C;AACD;AACD,cAAI,KAAK,aAAT,EAAwB;AACtB,iBAAK,KAAL,CAAW,YAAX,CAAwB,aAAxB,EAAuC,KAAK,aAA5C;AACD;AACD,eAAK,aAAL,CAAmB,MAAnB;AACD,S;;0BAED,c,6BAAiB;AACf,eAAK,aAAL,CAAmB,MAAnB;AACA,cAAI,KAAK,UAAT,EAAqB;AACnB,cAAE,KAAK,KAAP,EAAc,OAAd,CAAsB,YAAtB;AACD;AACF,S;;;mBAvDM,E,GAAK,C;;;iBAEU,E;;;;;iBACG,K;;;;;iBAGN,E;;;;;iBAGH,K;;;;;iBAGJ,M;;;;;iBAGA,K;;;;;iBAGI,K;;;;;;;;iBAIH,E","file":"input/input.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { TaskQueue } from 'aurelia-task-queue';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\nimport { MdInputUpdateService } from './input-update-service';\r\n\r\n@customElement('md-input')\r\n@inject(Element, TaskQueue, MdInputUpdateService)\r\nexport class MdInput {\r\n  static id = 0;\r\n\r\n  @bindable() mdLabel = '';\r\n  @bindable() mdDisabled = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdPlaceholder = '';\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdTextArea = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdType = 'text';\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdStep = 'any';\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdValidate = false;\r\n  @bindable() mdValidateError;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.twoWay\r\n  }) mdValue = '';\r\n\r\n  _suspendUpdate = false;\r\n\r\n  constructor(element, taskQueue, updateService) {\r\n    this.element = element;\r\n    this.taskQueue = taskQueue;\r\n    this.controlId = `md-input-${MdInput.id++}`;\r\n    this.updateService = updateService;\r\n  }\r\n\r\n  bind() {\r\n    this.mdTextArea = getBooleanFromAttributeValue(this.mdTextArea);\r\n  }\r\n\r\n  attached() {\r\n    if (getBooleanFromAttributeValue(this.mdValidate)) {\r\n      this.input.classList.add('validate');\r\n    }\r\n    if (this.mdValidateError)  {\r\n      this.label.setAttribute('data-error', this.mdValidateError);\r\n    }\r\n    if (this.mdPlaceholder) {\r\n      this.input.setAttribute('placeholder', this.mdPlaceholder);\r\n    }\r\n    this.updateService.update();\r\n  }\r\n\r\n  mdValueChanged() {\r\n    this.updateService.update();\r\n    if (this.mdTextArea) {\r\n      $(this.input).trigger('autoresize');\r\n    }\r\n  }\r\n}\r\n"]}