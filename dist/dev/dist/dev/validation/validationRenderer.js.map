{"version":3,"sources":["validation/validationRenderer.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAS,Y,+BAAA,M;;AACA,wB,sBAAA,kB;;;mDAII,iC,WADZ,OAAO,OAAP,C,EADA,kB;AAIC,mDAAY,eAAZ,EAA6B;AAAA;;AAC3B,eAAK,eAAL,GAAuB,eAAvB;AACD;;oDAED,M,mBAAO,K,EAAO,M,EAAQ;AACpB,cAAI,CAAC,MAAD,IAAW,EAAE,KAAK,eAAL,KAAyB,MAAzB,IAAmC,KAAK,eAAL,CAAqB,QAArB,CAA8B,MAA9B,CAArC,CAAf,EAA4F;AAC1F;AACD;;AAED,cAAI,eAAe,MAAM,OAAN,IAAiB,OAApC;;AAEA,kBAAQ,OAAO,OAAf;AACE,iBAAK,UAAL;AAAiB;AACf,oBAAI,QAAQ,OAAO,aAAP,CAAqB,OAArB,CAAZ;AACA,oBAAI,KAAJ,EAAW;AACT,wBAAM,SAAN,CAAgB,MAAhB,CAAuB,OAAvB;AACA,wBAAM,SAAN,CAAgB,GAAhB,CAAoB,SAApB;;AAGA,wBAAM,MAAN,GAAe,KAAf;;AAEA,sBAAI,QAAY,OAAO,aAAP,CAAqB,OAArB,CAAhB;AACA,sBAAI,KAAJ,EAAW;AACT,0BAAM,SAAN,CAAgB,MAAhB,CAAuB,OAAvB;AACA,0BAAM,SAAN,CAAgB,GAAhB,CAAoB,QAApB;AACA,0BAAM,SAAN,CAAgB,GAAhB,CAAoB,SAApB;;AAGA,wBAAI,MAAM,MAAM,YAAN,CAAmB,YAAnB,CAAV;AACA,wBAAG,CAAC,GAAJ,EAAS;AAEP,4BAAM,YAAN,CAAmB,YAAnB,EAAiC,YAAjC;AACD,qBAHD,MAGO;AAEL,4BAAM,OAAN,GAAgB,GAAhB;AACD;AACF;AACF;AACD;AACD;AA5BH;;AAgCA,iBAAO,MAAP,GAAiB,OAAO,MAAP,IAAiB,IAAI,GAAJ,EAAlC;AACA,iBAAO,MAAP,CAAc,GAAd,CAAkB,KAAlB;AACD,S;;oDAED,Q,qBAAS,K,EAAO,M,EAAQ;AACtB,cAAI,CAAC,MAAD,IAAW,CAAC,OAAO,MAAnB,IAA6B,CAAC,OAAO,MAAP,CAAc,GAAd,CAAkB,KAAlB,CAAlC,EAA4D;AAC1D;AACD;;AAED,iBAAO,MAAP,CAAc,MAAd,CAAqB,KAArB;;AAEA,kBAAQ,OAAO,OAAf;AACE,iBAAK,UAAL;AAAiB;AACf,oBAAI,QAAQ,OAAO,aAAP,CAAqB,OAArB,CAAZ;AACA,oBAAI,KAAJ,EAAW;;AAET,wBAAM,SAAN,CAAgB,MAAhB,CAAuB,SAAvB;AACA,wBAAM,SAAN,CAAgB,GAAhB,CAAoB,OAApB;;AAEA,sBAAI,QAAY,OAAO,aAAP,CAAqB,OAArB,CAAhB;AACA,sBAAI,KAAJ,EAAW;AACT,0BAAM,SAAN,CAAgB,MAAhB,CAAuB,SAAvB;AACA,0BAAM,SAAN,CAAgB,GAAhB,CAAoB,OAApB;AACD;AACF;AACD;AACD;AAfH;AAiBD,S","file":"validation/validationRenderer.js","sourceRoot":"/source/","sourcesContent":["import { inject } from 'aurelia-dependency-injection';\r\nimport { validationRenderer } from 'aurelia-validation';\r\n\r\n@validationRenderer\r\n@inject(Element)\r\nexport class MaterializeFormValidationRenderer {\r\n\r\n  constructor(boundaryElement) {\r\n    this.boundaryElement = boundaryElement;\r\n  }\r\n\r\n  render(error, target) {\r\n    if (!target || !(this.boundaryElement === target || this.boundaryElement.contains(target))) {\r\n      return;\r\n    }\r\n\r\n    let errorMessage = error.message || 'error';\r\n\r\n    switch (target.tagName) {\r\n      case 'MD-INPUT': {\r\n        let input = target.querySelector('input');\r\n        if (input) {\r\n          input.classList.remove('valid');\r\n          input.classList.add('invalid');\r\n\r\n          // focus target\r\n          error.target = input;\r\n\r\n          let label:any = target.querySelector('label');\r\n          if (label) {\r\n            label.classList.remove('valid');\r\n            label.classList.add('active');\r\n            label.classList.add('invalid');\r\n\r\n            // get error message from label\r\n            let msg = label.getAttribute('data-error');\r\n            if(!msg) {\r\n              // error message not set? add\r\n              label.setAttribute('data-error', errorMessage);\r\n            } else {\r\n              // set label message into error object\r\n              error.message = msg;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // tag the element so we know we rendered into it.\r\n    target.errors = (target.errors || new Map());\r\n    target.errors.set(error);\r\n  }\r\n\r\n  unrender(error, target) {\r\n    if (!target || !target.errors || !target.errors.has(error)) {\r\n      return;\r\n    }\r\n\r\n    target.errors.delete(error);\r\n\r\n    switch (target.tagName) {\r\n      case 'MD-INPUT': {\r\n        let input = target.querySelector('input');\r\n        if (input) {\r\n\r\n          input.classList.remove('invalid');\r\n          input.classList.add('valid');\r\n\r\n          let label:any = target.querySelector('label');\r\n          if (label) {\r\n            label.classList.remove('invalid');\r\n            label.classList.add('valid');\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]}